\documentclass[11pt]{article}
\usepackage[margin=2cm]{geometry}
\usepackage{graphicx}
\usepackage[dvipsnames]{xcolor}
\pagenumbering{gobble}
\graphicspath{{img}}


\begin{document}

\title{ARM Checkpoint}
\author{Bartłomiej Cieślar, Jordan Hall, Ioana Mihăilescu and Oliver Killane}
\date{2 June 2021}

\maketitle

\section{Group Organisation}
    As the emulator and assembler are separate programs, that can be tested and implemented independently, we have made a group decision to complete them in parallel. Despite both parts being already finished and the extension being developed, in this report we will primarily focus on the emulator.
    \begin{center}
        \begin{tabular}{ r | l }
            \textbf{Emulator} & \textbf{Assembler} \\
            Ioana \& Oliver & Bartłomiej \& Jordan \\
        \end{tabular}
    \end{center}
    \begin{center}
        \begin{tabular}{r l}
            Daily Standups & To bring up any issues with each other's code, decide what to work on for the day. \\
            Status Diagram & Each function given a rating determining progress status. (\textcolor{red}{todo}/\textcolor{orange}{implemented}/\textcolor{OliveGreen}{tested}) \\
            Merge Requests & New features done in separate branches, then merged into \textbf{emulate} or \textbf{assemble}\\&to allow for reviews. \\
            Pair programming & Live on call, and with VSCode LiveShare to reduce bug incidence. \\
            Unit Tests & Create unit tests for separable functions as they are implemented. \\
        \end{tabular}
    \end{center}
    \subsection*{Development Cycle}
        \begin{center}
            \includegraphics[width = \textwidth]{development cycle}
        \end{center}
    \subsection*{Group Function: \textcolor{OliveGreen}{excellent}}
        By splitting the project and developing for predefined interfaces members can feel free to develop at their own pace, and for any given design decision at most two members have to decide (too many cooks problem avoided).
        In particular pair programming has been very effective at writing bug-free, readable code on the first pass of our development cycle in most occasions.
        \newline\newline
        In the extension we will continue this strategy, but with the addition of more pair programming, in particular for test creation, as faulty unit tests have been a time consuming issue.
        \newline\newline
        One improvement we could make, is to delete and squash commits when merging a branch, this means we can preserve the commit message history, without having many 'dead' branches left. Furthermore, we could use more descriptive branch names to ease confusion as for their contents.

\section{Implementation Strategies}
    \subsection*{Project Structure}
        \begin{center}
            \includegraphics[width = \textwidth]{project status}
        \end{center}
    \begin{center}
        \begin{tabular}{l l l}
            Step & Functionality & Subroutine \\
            \hline
            (1) & Set the CPU up and initialize values to zero. & \textcolor{OliveGreen}{main} \\
            (2) & Write the input file into CPU memory. & \textcolor{OliveGreen}{loadProgram}\\
            (3) & While no halt instruction : & \textcolor{OliveGreen}{runProgram} \\
            (3a) & Read the current instruction and increment PC.  & \textcolor{OliveGreen}{runProgram}\\
            (3b) & Determine if instruction condition code is met by the CPU's CPSR register state. & \textcolor{OliveGreen}{checkCond}\\
            (3c) & If so, determine instruction type.  & \textcolor{OliveGreen}{runProgram}\\
            (3d) & Send instruction to appropriate function to change the CPU state. & \textcolor{OliveGreen}{Instr Functions}\\
            (4) & Display CPU state and exit. & \textcolor{OliveGreen}{printState} \\
        \end{tabular}
    \end{center}

    \subsection*{Notable design decisions}
        \subsubsection*{Offset to instruction fetch}
           The PC is always 8 bytes ahead of the instruction being computed. As in the pipeline, only the 'execute' stage changes the state of the CPU. We decided to avoid simulating that directly since processing the instructions separately has no performance penalties, and even improves it due to avoiding unnecessary intermideate representations of instructions. The performance gained over a more complex implementation will help with the development of the extension.
        \subsubsection*{CPSR register as separate from other registers}
            Since we only care about the CPSR register's most significant 4 bits and the register itself cannot be access with any instructions, we only store those bits, which allows for a more readable code (access via CPU.CPSR.N/Z/C/V) and faster changing of the flags (no masks or shifting required).
        \subsubsection*{CPU global variable}
            The CPU state is held in a single global struct which side effected by all functions changing its state.
\end{document}
